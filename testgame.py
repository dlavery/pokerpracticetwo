import unittest
from game import Game
from gameexception import GameException
from gameoverexception import GameOverException
from player import Player
from playerhand import PlayerHand
from community import Community
from card import Card
from rules import Rules

class TestGame(unittest.TestCase):

    def setUp(self):
        pass
    '''
    def test_maximumplayers(self):
        game = Game()
        gamefull = False
        game.addplayer(Player('1'))
        game.addplayer(Player('2'))
        game.addplayer(Player('3'))
        game.addplayer(Player('4'))
        game.addplayer(Player('5'))
        game.addplayer(Player('6'))
        game.addplayer(Player('7'))
        game.addplayer(Player('8'))
        try:
            game.addplayer(Player('9'))
        except GameException:
            gamefull = True
        self.assertEqual(gamefull, True)

    def test_gameinprogress(self):
        game = Game()
        gamestarted = False
        game.addplayer(Player('1'))
        game.addplayer(Player('2'))
        game.addplayer(Player('3'))
        game.addplayer(Player('4'))
        hand = game.newhand()
        hand.deal()
        try:
            game.addplayer(Player('5'))
        except GameException:
            gamestarted = True
        self.assertEqual(gamestarted, True)

    def test_duplicateplayer(self):
        game = Game()
        duplicateplayer = False
        game.addplayer(Player('1'))
        try:
            game.addplayer(Player('1'))
        except GameException:
            duplicateplayer = True
        self.assertEqual(duplicateplayer, True)

    def test_ranking_highcard(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('9', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('7', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 1)

    def test_ranking_pair(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('7', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 2)

    def test_ranking_twopairs(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('Q', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 3)

    def test_ranking_trips(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('Q', 'H'), Card('A', 'H'), Card('Q', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 4)

    def test_ranking_straight(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('10', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('J', 'H'), Card('9', 'H'), Card('Q', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 5)

    def test_ranking_straightwithacehigh(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('10', 'C'))
        alice.deal(Card('Q', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('J', 'H'), Card('A', 'H'), Card('Q', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 5)

    def test_ranking_straightwithacelow(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('3', 'C'))
        alice.deal(Card('5', 'C'))
        hand.setcommunity([Card('K', 'S'), Card('J', 'H'), Card('A', 'H'), Card('4', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 5)

    def test_ranking_straightwithapair(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('3', 'C'))
        alice.deal(Card('5', 'C'))
        hand.setcommunity([Card('6', 'S'), Card('4', 'C'), Card('Q', 'H'), Card('4', 'S'), Card('2', 'S')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 5)

    def test_ranking_flush(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('3', 'C'))
        alice.deal(Card('5', 'C'))
        hand.setcommunity([Card('7', 'S'), Card('4', 'C'), Card('Q', 'C'), Card('4', 'S'), Card('2', 'C')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 6)

    def test_ranking_fullhouse(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('3', 'C'))
        alice.deal(Card('4', 'D'))
        hand.setcommunity([Card('7', 'S'), Card('4', 'C'), Card('Q', 'C'), Card('4', 'S'), Card('3', 'H')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 7)

    def test_ranking_quads(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('3', 'C'))
        alice.deal(Card('3', 'D'))
        hand.setcommunity([Card('7', 'S'), Card('K', 'C'), Card('3', 'S'), Card('4', 'S'), Card('3', 'H')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 8)

    def test_ranking_straightflush(self):
        game = Game()
        alice = Player('Alice')
        game.addplayer(alice)
        hand = game.newhand()
        alice.deal(Card('8', 'D'))
        alice.deal(Card('10', 'D'))
        hand.setcommunity([Card('7', 'D'), Card('K', 'C'), Card('9', 'D'), Card('6', 'D'), Card('3', 'H')])
        playerhand = alice.makehand(hand.getcommmunity(), Rules())
        self.assertEqual(playerhand.getranking(), 9)

    def test_winner_1playerwithhigherpair(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        game.addplayer(alice)
        game.addplayer(bob)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        bob.deal(Card('8', 'D'))
        bob.deal(Card('K', 'D'))
        hand.setcommunity([Card('K', 'S'), Card('7', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        winners = hand.showdown()
        self.assertEqual(len(winners), 1)
        self.assertEqual(winners[0].name(), 'Bob')

    def test_winner_2playerswithsamepair(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        game.addplayer(alice)
        game.addplayer(bob)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        bob.deal(Card('8', 'D'))
        bob.deal(Card('K', 'D'))
        hand.setcommunity([Card('4', 'S'), Card('7', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        winners = hand.showdown()
        self.assertEqual(len(winners), 1)
        self.assertEqual(winners[0].name(), 'Bob')

    def test_winner_2playerswithsamehand(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        game.addplayer(alice)
        game.addplayer(bob)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        bob.deal(Card('8', 'D'))
        bob.deal(Card('Q', 'D'))
        hand.setcommunity([Card('4', 'S'), Card('7', 'H'), Card('A', 'H'), Card('8', 'S'), Card('2', 'S')])
        winners = hand.showdown()
        self.assertEqual(len(winners), 2)
        self.assertEqual(winners[0].name(), 'Alice')
        self.assertEqual(winners[1].name(), 'Bob')

    def test_winner_2players1winner(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        game.addplayer(alice)
        game.addplayer(bob)
        hand = game.newhand()
        alice.deal(Card('8', 'C'))
        alice.deal(Card('Q', 'C'))
        bob.deal(Card('7', 'D'))
        bob.deal(Card('10', 'D'))
        hand.setcommunity([Card('8', 'S'), Card('8', 'H'), Card('A', 'H'), Card('Q', 'S'), Card('10', 'S')])
        winners = hand.showdown()
        self.assertEqual(len(winners), 1)
        self.assertEqual(winners[0].name(), 'Alice')

    def test_preflop_betting_all_call(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call big blind (assume bb is 200)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 100) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        hand.act(actor, 'check', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4800)
        self.assertEqual(bob.getchips(), 4800)
        self.assertEqual(john.getchips(), 4800)
        self.assertEqual(jill.getchips(), 4800)

    def test_preflop_betting_player_raise(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call big blind (assume big blind is at 200)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 400) # raise to 400
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 300) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4600)
        self.assertEqual(bob.getchips(), 4600)
        self.assertEqual(john.getchips(), 4600)
        self.assertEqual(jill.getchips(), 4600)
    
    def test_preflop_betting_smallblind_raise(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call big blind (assume big blind is 200)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 200) # call big blind (assume big blind is 200)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 400) # raise to 500
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 300) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 300) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'bet', 300) # call
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4500)
        self.assertEqual(bob.getchips(), 4500)
        self.assertEqual(john.getchips(), 4500)
        self.assertEqual(jill.getchips(), 4500)

    def test_preflop_betting_bigblind_raise(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)  # call big blind
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        hand.act(actor, 'raise', 1000)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4000)
        self.assertEqual(bob.getchips(), 4000)
        self.assertEqual(john.getchips(), 4000)
        self.assertEqual(jill.getchips(), 4000)

    def test_preflop_betting_fold_1(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'fold', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        hand.act(actor, 'check', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4800)
        self.assertEqual(bob.getchips(), 4800)
        self.assertEqual(john.getchips(), 5000)
        self.assertEqual(jill.getchips(), 4800)

    def test_preflop_betting_fold_2(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'fold', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        hand.act(actor, 'check', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4900)
        self.assertEqual(bob.getchips(), 4800)
        self.assertEqual(john.getchips(), 4800)
        self.assertEqual(jill.getchips(), 4800)

    def test_postflop_betting_all_call(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        hand.act(actor, 'check', 0)
        hand.flop()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        hand.act(actor, 'check', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        self.assertEqual(options, ('check', 'bet', 'fold'))
        try:
            hand.act(actor, 'bet', 100) # ensure error generated if bet too low
            self.assertEqual(1, 0)
        except GameException:
            pass
        hand.act(actor, 'bet', 400)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        self.assertEqual(options, ('bet', 'fold'))
        try:
            hand.act(actor, 'check', 0) # test invalid action is caught
            self.assertEqual(1, 0)
        except GameException:
            pass
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        self.assertEqual(options, ('bet', 'fold'))
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        self.assertEqual(alice.getchips(), 4400)
        self.assertEqual(bob.getchips(), 4400)
        self.assertEqual(john.getchips(), 4400)
        self.assertEqual(jill.getchips(), 4400)

    def test_postflop_betting_winner_1(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
        except GameOverException:
            pass
        finally:
            winners = hand.showdown()
        winner = winners[0]
        self.assertEqual(len(winners), 1)
        self.assertEqual(winner.name(), 'Bob')
        self.assertEqual(bob.getchips(), 5100)
        self.assertEqual(alice.getchips(), 4900)
        self.assertEqual(john.getchips(), 5000)
        self.assertEqual(jill.getchips(), 5000)
           
    def test_postflop_betting_winner_2(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
        except GameOverException as e:
            pass
        finally:
            winners = hand.showdown()
        win = int(800 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                self.assertIn(alice.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Alice')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (4800 + win, 4801 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Jill')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 4800)
        if 'Alice' not in winningnames:
            self.assertEqual(alice.getchips(), 4800)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 4800)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), 4800)

    def test_preriver_betting_winner(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'bet', 800)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
        except GameOverException:
            pass
        finally:
            winners = hand.showdown()
        win = int(3200 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (4000 + win, 4001 + win))
                winningnames.append('Bob')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (4000 + win, 4001 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (4000 + win, 4001 + win))
                winningnames.append('Jill')
        self.assertEqual(alice.getchips(), 4800)
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 4000)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 4000)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), 4000)

    def test_raise_betting_winner(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'raise', 1000)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            hand.act(actor, 'call', 0)
            self.assertEqual(actor.name(), 'John')
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'bet', 200)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
        except GameOverException as e:
            pass
        finally:
            winners = hand.showdown()
        win = int(4800 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (3800 + win, 3801 + win))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                self.assertIn(alice.getchips(), (3800 + win, 3801 + win))
                winningnames.append('Alice')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (3800 + win, 3801 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (3800 + win, 3801 + win))
                winningnames.append('Jill')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 3800)
        if 'Alice' not in winningnames:
            self.assertEqual(alice.getchips(), 3800)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 3800)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), 3800)

    def test_hand_2_winner(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
        except GameOverException as e:
            pass
        finally:
            winners = hand.showdown()
        win = int(800 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                self.assertIn(alice.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Alice')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (4800 + win, 4801 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (4800 + win, 4801 + win))
                winningnames.append('Jill')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 4800)
        if 'Alice' not in winningnames:
            self.assertEqual(alice.getchips(), 4800)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 4800)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), 4800)

        alicechips = alice.getchips()
        bobchips = bob.getchips()
        johnchips = john.getchips()
        jillchips = jill.getchips()

        try:
            game.rotatedealer()
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
        except GameOverException as e:
            pass
        finally:
            winners = hand.showdown()
        win = int(800 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (bobchips - 200 + win, bobchips - 199 + win))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                self.assertIn(alice.getchips(), (alicechips - 200 + win, alicechips - 199 + win))
                winningnames.append('Alice')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (johnchips - 200 + win, johnchips - 199 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (jillchips - 200 + win, jillchips - 199 + win))
                winningnames.append('Jill')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), bobchips - 200)
        if 'Alice' not in winningnames:
            self.assertEqual(alice.getchips(), alicechips - 200)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), johnchips - 200)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), jillchips - 200)

    def test_raising(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'bet', 400)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'raise', 500)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.turn()
            hand.river()
        except GameOverException as e:
            pass
        finally:
            winners = hand.showdown()
        win = int(2700 / len(winners))
        winningnames = []
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (4400 + win, 4400 + win))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                self.assertIn(alice.getchips(), (4300 + win, 4300 + win))
                winningnames.append('Alice')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (4300 + win, 4300 + win))
                winningnames.append('John')
            else:
                self.assertIn(jill.getchips(), (4300 + win, 4300 + win))
                winningnames.append('Jill')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 4400)
        if 'Alice' not in winningnames:
            self.assertEqual(alice.getchips(), 4300)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 4300)
        if 'Jill' not in winningnames:
            self.assertEqual(jill.getchips(), 4300)

    def test_fold_then_raise(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'check', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'bet', 200)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'raise', 500)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
        except GameException as e1:
            raise e1
        except GameOverException as e2:
            raise e2
    '''
    def test_big_blind_all_in(self):
        try:
            game = Game()
            alice = Player('Alice')
            bob = Player('Bob')
            john = Player('John')
            jill = Player('Jill')
            game.addplayer(alice)
            game.addplayer(bob)
            game.addplayer(john)
            game.addplayer(jill)
            hand = game.newhand()
            hand.deal()
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'call', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Bob')
            hand.act(actor, 'all-in', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'John')
            hand.act(actor, 'all-in', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Jill')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor.name(), 'Alice')
            hand.act(actor, 'fold', 0)
            (actor, options) = hand.nexttobet()
            self.assertEqual(actor, None)
            hand.flop()
            hand.turn()
            hand.river()
        except GameException as e1:
            raise e1
        except GameOverException as e2:
            raise e2
        finally:
            winners = hand.showdown()
        win = int(10400 / len(winners))
        winningnames = []
        pots = hand.getpots()
        self.assertEqual(len(pots), 1)
        self.assertGreater(pots[0].getvalue(), 0)
        for winner in winners:
            if winner.name() == 'Bob':
                self.assertIn(bob.getchips(), (win, win + 1))
                winningnames.append('Bob')
            elif winner.name() == 'Alice':
                raise Exception('Alice has folded')
            elif winner.name() == 'John':
                self.assertIn(john.getchips(), (win, win + 1))
                winningnames.append('John')
            else:
                raise Exception('Jill has folded')
        if 'Bob' not in winningnames:
            self.assertEqual(bob.getchips(), 0)
        if 'John' not in winningnames:
            self.assertEqual(john.getchips(), 0)
    '''
    def test_big_blind_fold(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'fold', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
    
    def test_flop_after_fold(self):
        game = Game()
        alice = Player('Alice')
        bob = Player('Bob')
        john = Player('John')
        jill = Player('Jill')
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'fold')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        hand.flop()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
    '''
    def test_allin(self):
        game = Game()
        alice = Player('Alice', chipstack=5000)
        bob = Player('Bob', chipstack=5000)
        john = Player('John', chipstack=5000)
        jill = Player('Jill', chipstack=1000)
        game.addplayer(alice)
        game.addplayer(bob)
        game.addplayer(john)
        game.addplayer(jill)
        hand = game.newhand()
        hand.deal()
        ph = PlayerHand('Alice')
        ph.addcard(Card('9', 'C'))
        ph.addcard(Card('10', 'C'))
        alice.setplayerhand(ph)
        ph = PlayerHand('Bob')
        ph.addcard(Card('K', 'D'))
        ph.addcard(Card('Q', 'C'))
        bob.setplayerhand(ph)
        ph = PlayerHand('John')
        ph.addcard(Card('10', 'S'))
        ph.addcard(Card('10', 'D'))
        bob.setplayerhand(ph)
        ph = PlayerHand('Jill')
        ph.addcard(Card('5', 'D'))
        ph.addcard(Card('5', 'S'))
        jill.setplayerhand(ph)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'call')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Jill')
        hand.act(actor, 'all-in', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'call', 0)
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'call')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'call')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        hand.flop()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        hand.turn()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        hand.river()
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Alice')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'Bob')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor.name(), 'John')
        hand.act(actor, 'check')
        (actor, options) = hand.nexttobet()
        self.assertEqual(actor, None)
        hand.setcommunity([Card('K', 'C'), Card('2', 'D'), Card('A', 'H'), Card('9', 'H'), Card('2', 'S')])

if __name__ == '__main__':
    unittest.main()
